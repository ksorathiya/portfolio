// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2mqA18vU3vkpw8fmHw7GP9
// Component: eoyJGYKoNK
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import HeroTitle from "../../HeroTitle"; // plasmic-import: NP_waT9R6b/component
import HeroLink from "../../HeroLink"; // plasmic-import: K8JtqehUC4/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_kartik_portfolio.module.css"; // plasmic-import: 2mqA18vU3vkpw8fmHw7GP9/projectcss
import * as sty from "./PlasmicHeroLeft.module.css"; // plasmic-import: eoyJGYKoNK/css
import Line104Icon from "./icons/PlasmicIcon__Line104"; // plasmic-import: 0BWX4kgY0fD/icon

export const PlasmicHeroLeft__VariantProps = new Array();

export const PlasmicHeroLeft__ArgProps = new Array();

function PlasmicHeroLeft__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <HeroTitle
        data-plasmic-name={"heroTitle"}
        data-plasmic-override={overrides.heroTitle}
        className={classNames("__wab_instance", sty.heroTitle)}
      />

      <HeroLink
        data-plasmic-name={"heroLink"}
        data-plasmic-override={overrides.heroLink}
        className={classNames("__wab_instance", sty.heroLink)}
      />

      <Line104Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(defaultcss.all, sty.svg)}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "heroTitle", "heroLink", "svg"],
  heroTitle: ["heroTitle"],
  heroLink: ["heroLink"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroLeft__ArgProps,
      internalVariantPropNames: PlasmicHeroLeft__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeroLeft__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroLeft";
  } else {
    func.displayName = `PlasmicHeroLeft.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroLeft = Object.assign(
  // Top-level PlasmicHeroLeft renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroTitle: makeNodeComponent("heroTitle"),
    heroLink: makeNodeComponent("heroLink"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicHeroLeft
    internalVariantProps: PlasmicHeroLeft__VariantProps,
    internalArgProps: PlasmicHeroLeft__ArgProps
  }
);

export default PlasmicHeroLeft;
/* prettier-ignore-end */
