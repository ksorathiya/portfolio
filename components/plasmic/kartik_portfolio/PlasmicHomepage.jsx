// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2mqA18vU3vkpw8fmHw7GP9
// Component: hGw_PBzTluaE
import * as React from "react";
import Head from "next/head";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import HeroRight from "../../HeroRight"; // plasmic-import: PgYjHEPsSD/component
import HeroLeft from "../../HeroLeft"; // plasmic-import: eoyJGYKoNK/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_kartik_portfolio.module.css"; // plasmic-import: 2mqA18vU3vkpw8fmHw7GP9/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: hGw_PBzTluaE/css
import Ellipse167Icon from "./icons/PlasmicIcon__Ellipse167"; // plasmic-import: DnxiLItfZc1/icon
import Ellipse168Icon from "./icons/PlasmicIcon__Ellipse168"; // plasmic-import: uv1e117DCtO/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames(defaultcss.all, sty.heroSection)}
          >
            <HeroRight
              data-plasmic-name={"heroRight"}
              data-plasmic-override={overrides.heroRight}
              className={classNames("__wab_instance", sty.heroRight)}
            />

            <HeroLeft
              data-plasmic-name={"heroLeft"}
              data-plasmic-override={overrides.heroLeft}
              className={classNames("__wab_instance", sty.heroLeft)}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__zdrIx)}
              role={"img"}
              src={"/plasmic/kartik_portfolio/images/cube1.svg"}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__xiJfk)}
              role={"img"}
              src={"/plasmic/kartik_portfolio/images/cube2.svg"}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__hbOwn)}
              role={"img"}
              src={"/plasmic/kartik_portfolio/images/cube3.svg"}
            />

            <Ellipse167Icon
              className={classNames(defaultcss.all, sty.svg__rCokL)}
              role={"img"}
            />

            <Ellipse168Icon
              className={classNames(defaultcss.all, sty.svg__yYPpN)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "heroSection", "heroRight", "heroLeft"],
  heroSection: ["heroSection", "heroRight", "heroLeft"],
  heroRight: ["heroRight"],
  heroLeft: ["heroLeft"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    heroRight: makeNodeComponent("heroRight"),
    heroLeft: makeNodeComponent("heroLeft"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
